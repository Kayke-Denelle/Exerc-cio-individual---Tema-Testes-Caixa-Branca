"use strict";exports.id=476,exports.ids=[476],exports.modules={1064:(e,s,o)=>{o.d(s,{fromSSO:()=>p});var t=o(61),n=o(62);var r=o(70);const i="To refresh this SSO session run 'aws sso login' with the corresponding profile.",a={},c=async(e,s)=>{const{CreateTokenCommand:t}=await o.e(945).then(o.bind(o,1071)),n=await(async e=>{const{SSOOIDCClient:s}=await o.e(945).then(o.bind(o,1071));if(a[e])return a[e];const t=new s({region:e});return a[e]=t,t})(s);return n.send(new t({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},l=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new t.Jh(`Token is expired. ${i}`,!1)},w=(e,s,o=!1)=>{if(void 0===s)throw new t.Jh(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${i}`,!1)};var f=o(10);const{writeFile:d}=f.promises,g=new Date(0),h=(e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers - fromSso");const s=await(0,n.YU)(e),o=(0,n.Bz)(e),r=s[o];if(!r)throw new t.Jh(`Profile '${o}' could not be found in shared credentials file.`,!1);if(!r.sso_session)throw new t.Jh(`Profile '${o}' is missing required property 'sso_session'.`);const a=r.sso_session,f=(await(0,n.qw)(e))[a];if(!f)throw new t.Jh(`Sso session '${a}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!f[e])throw new t.Jh(`Sso session '${a}' is missing required property '${e}'.`,!1);f.sso_start_url;const h=f.sso_region;let S;try{S=await(0,n.vf)(a)}catch(e){throw new t.Jh(`The SSO session token associated with profile=${o} was not found or is invalid. ${i}`,!1)}w("accessToken",S.accessToken),w("expiresAt",S.expiresAt);const{accessToken:u,expiresAt:p}=S,y={token:u,expiration:new Date(p)};if(y.expiration.getTime()-Date.now()>3e5)return y;if(Date.now()-g.getTime()<3e4)return l(y),y;w("clientId",S.clientId,!0),w("clientSecret",S.clientSecret,!0),w("refreshToken",S.refreshToken,!0);try{g.setTime(Date.now());const e=await c(S,h);w("accessToken",e.accessToken),w("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const o=(0,n.C9)(e),t=JSON.stringify(s,null,2);return d(o,t)})(a,{...S,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return l(y),y}},S=!1,u=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:i,ssoRegion:a,ssoRoleName:c,ssoClient:l,clientConfig:w,profile:f,logger:d})=>{let g;const u="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await h({profile:f})();g={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new t.C1(e.message,{tryNextLink:S,logger:d})}else try{g=await(0,n.vf)(e)}catch(e){throw new t.C1(`The SSO session associated with this profile is invalid. ${u}`,{tryNextLink:S,logger:d})}if(new Date(g.expiresAt).getTime()-Date.now()<=0)throw new t.C1(`The SSO session associated with this profile has expired. ${u}`,{tryNextLink:S,logger:d});const{accessToken:p}=g,{SSOClient:y,GetRoleCredentialsCommand:k}=await o.e(736).then(o.bind(o,1070)),_=l||new y(Object.assign({},w??{},{region:w?.region??a}));let m;try{m=await _.send(new k({accountId:i,roleName:c,accessToken:p}))}catch(e){throw new t.C1(e,{tryNextLink:S,logger:d})}const{roleCredentials:{accessKeyId:T,secretAccessKey:x,sessionToken:O,expiration:C,credentialScope:N,accountId:$}={}}=m;if(!(T&&x&&O&&C))throw new t.C1("SSO returns an invalid temporary credential.",{tryNextLink:S,logger:d});const I={accessKeyId:T,secretAccessKey:x,sessionToken:O,expiration:new Date(C),...N&&{credentialScope:N},...$&&{accountId:$}};return s?(0,r.g)(I,"CREDENTIALS_SSO","s"):(0,r.g)(I,"CREDENTIALS_SSO_LEGACY","u"),I},p=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:s,ssoAccountId:o,ssoRegion:r,ssoRoleName:i,ssoSession:a}=e,{ssoClient:c}=e,l=(0,n.Bz)(e);if(s||o||r||i||a){if(s&&o&&r&&i)return u({ssoStartUrl:s,ssoSession:a,ssoAccountId:o,ssoRegion:r,ssoRoleName:i,ssoClient:c,clientConfig:e.clientConfig,profile:l});throw new t.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{const o=(await(0,n.YU)(e))[l];if(!o)throw new t.C1(`Profile ${l} was not found.`,{logger:e.logger});if(!(w=o)||"string"!=typeof w.sso_start_url&&"string"!=typeof w.sso_account_id&&"string"!=typeof w.sso_session&&"string"!=typeof w.sso_region&&"string"!=typeof w.sso_role_name)throw new t.C1(`Profile ${l} is not configured with SSO credentials.`,{logger:e.logger});if(o?.sso_session){const i=(await(0,n.qw)(e))[o.sso_session],a=` configurations in profile ${l} and sso-session ${o.sso_session}`;if(r&&r!==i.sso_region)throw new t.C1("Conflicting SSO region"+a,{tryNextLink:!1,logger:e.logger});if(s&&s!==i.sso_start_url)throw new t.C1("Conflicting SSO start_url"+a,{tryNextLink:!1,logger:e.logger});o.sso_region=i.sso_region,o.sso_start_url=i.sso_start_url}const{sso_start_url:i,sso_account_id:a,sso_region:f,sso_role_name:d,sso_session:g}=((e,s)=>{const{sso_start_url:o,sso_account_id:n,sso_region:r,sso_role_name:i}=e;if(!(o&&n&&r&&i))throw new t.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e})(o,e.logger);return u({ssoStartUrl:i,ssoSession:g,ssoAccountId:a,ssoRegion:f,ssoRoleName:d,ssoClient:c,clientConfig:e.clientConfig,profile:l})}var w}}};